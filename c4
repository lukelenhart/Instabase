#Connect 4 Final

import random

class Board:
    """data type for the connect 4 board
    """

    def __init__(self, width, height):
        """Construct board, with the given W and H."""
        self.width = width
        self.height = height
        W = self.width
        H = self.height
        self.data = [[' ']*W for row in range(H)]

        # We do not need to return anything from a constructor!

    def __repr__(self):
        """This method returns a string representation
           for an object of type Board.
        """
        H = self.height
        W = self.width
        s = ''
        for r in range( H ):
            s += '|'
            for c in range( W ):
                s += self.data[r][c] + '|'
            s += '\n'

        s += (2*W+1)*'-'
        s += '\n'
        for col in range(0, self.width):
            s += ' ' + str(col)

        return s       # the board is complete, return it
    
    def addMove(self, col, ox): 
        """This method takes two arguments: the first, col, represents the index of the column to which the checker will be added. The second argument, ox, will be a 1-character string representing the checker to add to the board. That is, ox should either be 'X' or 'O' (again, capital O, not zero).
        """
        H = self.height
        for row in range(0,H):
            if self.data[row][col] != ' ':
                self.data[row-1][col] = ox
                return
        self.data[H-1][col] = ox
    
    def clear(self):
        """ The function should clear and reset the game board
        """
        for row in range(self.height):
            for col in range(self.width):
                self.data[row][col] = ' '
        
    def setBoard(self, moveString):
        """Accepts a string of columns and places
           alternating checkers in those columns,
           starting with 'X'.
        """
        nextChecker = 'X'   # start by playing 'X'
        for colChar in moveString:
            col = int(colChar)
            if 0 <= col <= self.width:
                self.addMove(col, nextChecker)
            if nextChecker == 'X':
                nextChecker = 'O'
            else:
                nextChecker = 'X'

    def allowsMove(self, col):
        """True if col is in-bounds & open and False otherwise 
        """
        H = self.height
        W = self.width
        D = self.data
        if col >= W or col < 0:
            return False
        elif D[0][col] != ' ':
            return False
        else:
            return True

    def isFull(self):
        """Checks to see if the board is full. True if it is, False if it's not
        """
        H = self.height
        W = self.width
        D = self.data
        for x in range(W):
            if D[0][x] == ' ':
                return False
        return True 

    def delMove(self, c): 
        """removes the top checker from the column c. 
        If the column is empty, then delMove should do nothing.
        """
        H = self.height
        for row in range(0,H):
            if self.data[row][c] == 'X' or self.data[row][c] == 'O':
                self.data[row][c] = ' '
                return
        return

    def winsFor(self, ox):
        """Checks in all different directions on wether a player
           has won the game or not with four X's or O's in a row
        """
        H = self.height
        W = self.width
        D = self.data
        # Check for East wins
        for row in range(0, H):
            for col in range(0, W - 3):
                if D[row][col] == ox and \
                   D[row][col + 1] == ox and \
                   D[row][col + 2] == ox and \
                   D[row][col + 3] == ox:
                    return True
        
        # Check for South wins
        for row in range(0, H - 3):
            for col in range(0, W):
                if D[row][col] == ox and \
                   D[row + 1][col] == ox and \
                   D[row + 2][col] == ox and \
                   D[row + 3][col] == ox:
                    return True
        
        # Check for south/east wins
        for row in range(0, H - 3):
            for col in range(0, W - 3):
                if D[row][col] == ox and \
                   D[row + 1][col + 1] == ox and \
                   D[row + 2][col + 2] == ox and \
                   D[row + 3][col + 3] == ox:
                    return True
        
        # Check for north/east wins
        for row in range(3, H):
            for col in range(0, W - 3):
                if D[row][col] == ox and \
                   D[row - 1][col + 1] == ox and \
                   D[row - 2][col + 2] == ox and \
                   D[row - 3][col + 3] == ox:
                    return True

        return False
    
    def colsToWin(self, ox):
        """
        returns the list of columns where ox can move in the next 
        turn in order to win and finish the game.
        """
        winList = []
        W = self.width
        for i in range(W):
            #print("i is", i)
            if self.allowsMove(i):
                self.addMove(i, ox)
                #print("self is", self)
                if self.winsFor(ox):
                    winList = winList + [i]
                self.delMove(i)
            #print("winList is", winList)

        return winList

    def timmy(self):
        #A little option 1 trick to make the game a bit more interesting
        #Timmy can throw the game for either AI or human (but not Grutor or Dodds because
        #they will move before the option (minimum of 2) will kick in)
        H = self.height
        W = self.width
        tpick = random.randint(0, W)
        tscrew = random.choice (['X','O'])
        print ("Timmy picks row:" (tpick))
        print ("Timmy's messing with:" (tscrew))
        return

    def aiMove(self, ox):
        """This function returns a col # to make a move. If it can win, it will return column number to win,
           if it cannot win, it will return the column number to block the opponent,
           if neither opponent can win, it will move towards the middle
        """
        H = self.height
        W = self.width
        list1 = []
        list2 = []
        
        if ox == 'X':
            list1 = self.colsToWin("X")
            list2 = self.colsToWin("O")
            if list1 != []:
                #self.addMove(list1[0], 'X')
                return list1[0]
            elif list2 != []:
                #self.addMove(list2[0], "X")
                return list2[0]
            else: 
                for col in [3,2,4,1,5,0,6]:
                    if self.allowsMove(col) == True:
                        #self.addMove(col, "X")
                        return col
        else:
            list1 = self.colsToWin("O")
            list2 = self.colsToWin("X")
            if list1 != []:
                #self.addMove(list1[0], 'O')
                return list1[0]
            elif list2 != []:
                #self.addMove(list2[0], "O")
                return list2[0]
            else: 
                for col in [3,2,4,1,5,0,6]:
                    if self.allowsMove(col) == True:
                        #self.addMove(col, "O")
                        return col

           
    def hostGame(self):
        """This is what runs the entire game and prompts users to enter
           their moves and play out the full game
        """
        print("Welcome to Connect Four!")
        print(self)
        while True:
            users_col = int(input("Choose a colum "))
            while self.allowsMove(users_col) == False:
                users_col = int(input("Choose a colum "))
            self.addMove(users_col, "X")
            print(self)
            if self.winsFor('X'): 
                print("X has won")
                break
            ai = self.aiMove("O") 
            self.addMove(ai, "O")
            print(self)
            if self.winsFor('O'):
                print('O has won the game')
                print('Congrats')
                break 
            if self.isFull() == True:
                print("The game has finished")
                print("Thanks for playing!")
                break 

    def playGame(self, pForX, pForO, ss = False):
        """Plays a game of Connect Four.
            p1 and p2 are objects of type Player OR
            the string 'human'.
            Can also use 'Grutor' mode or 'Dodds' mode 
            If ss is True, it will "show scores" each time.
        """

        nextCheckerToMove = 'X'
        nextPlayerToMove = pForX
        t = random.randint(2,15)

        while True:

            # print the current board
            print(self)

            # choose the next move
            if nextPlayerToMove == 'human':
                col = -1
                while not self.allowsMove(col):
                    col = int(input('Next col for ' + nextCheckerToMove + ': '))
            
            if nextPlayerToMove == 'Dodds': #easter egg for Dodds
                self.clear()
                self.addMove(0, nextCheckerToMove)
                self.addMove(0, nextCheckerToMove)
                self.addMove(0, nextCheckerToMove)
                self.addMove(0, nextCheckerToMove)
                print(self)
                print('\n' + nextCheckerToMove + ' wins! Congratulations!\n\n')
                print("Amazing work")
                print("Just like my final")
                print("Please give Luke & Monty an A on their Final")
                print("It would be much apreciated")
                print("By me of course,")
                print("- Connect 4 allien,")
                break

            if nextPlayerToMove == 'Grutor':
                Gsay = input("Glad I caught you there\n Are you liking this project so far? (Y/N)")
                if Gsay == 'Y' or Gsay == 'y':
                    print ("I'm glad to hear that")
                    print ("here have a free couple moves to put you \n in the lead")
                    self.clear()
                    self.addMove(0, nextCheckerToMove)
                    self.addMove(0, nextCheckerToMove)
                    self.addMove(0, nextCheckerToMove)
                    print (self)
                    col = -1
                    while not self.allowsMove(col):
                        col = int(input('Next col for ' + nextCheckerToMove + ': '))
                else:
                    print ("Shucks")
                    print ("Maybe I can bribe your way \n Here, I'll make it easier for you")
                    self.clear()
                    self.addMove(0, nextCheckerToMove)
                    self.addMove(0, nextCheckerToMove)
                    self.addMove(0, nextCheckerToMove)
                    print (self)
                    col = -1
                    while not self.allowsMove(col):
                        col = int(input('Next col for ' + nextCheckerToMove + ': '))

    
            else: # it's a computer player
                if ss:
                    scores = nextPlayerToMove.scoresFor(self)
                    print((nextCheckerToMove + "'s"), 'Scores: ', [int(sc) for sc in scores])
                    print()
                    col = nextPlayerToMove.tiebreakMove(scores)
                else:
                    col = nextPlayerToMove.nextMove(self)

            # add the checker to the board
            self.addMove(col, nextCheckerToMove)
            t += -1

            #Little brother involvment
            if t == 0:
                self.Timmy()
                self.addMove(tpick, tscrew)
                print ("Oh crap - Little Timmy")
                print ("Why did you do that")
                print(self)
                t = random.randint(2,15)

            # check if game is over
            if self.winsFor(nextCheckerToMove):
                print(self)
                print('\n' + nextCheckerToMove + ' wins! Congratulations!\n\n')
                break
            if self.isFull():
                print(self)
                print('\nThe game is a draw.\n\n')
                break
            
            # swap players
            if nextCheckerToMove == 'X':
                nextCheckerToMove = 'O'
                nextPlayerToMove = pForO
            else:
                nextCheckerToMove = 'X'
                nextPlayerToMove = pForX
        print('Come back 4 more!')

class Player:
    """An AI player for Connect Four."""

    def __init__(self, ox, tbt, ply):
        """Construct a player for a given checker, tie-breaking type,
           and ply."""
        self.ox = ox
        self.tbt = tbt 
        self.ply = ply

    def __repr__(self):
        """Create a string represenation of the player."""
        s = "Player for " + self.ox + "\n"
        s += "  with tiebreak type: " + self.tbt + "\n"
        s += "  and ply == " + str(self.ply) + "\n\n"
        return s

    def oppCh(self): 
        """This method should return the other kind of checker or 
        playing piece, i.e., the piece being played by self's 
        opponent.
        """
        if self.ox == 'X':
            return 'O'
        else:
            return 'X'

    def scoreBoard(self, b):
        """Returns a single float value 
        representing the score of the input b. 
        returns 100.0 if the board b is a win for self.
        returns 50.0 if it is neither a win nor a loss for self, 
        and it should return 0.0 if it is a loss for self
        """ 
        scores = [50.0, 50.0, 50.0, 50.0, 50.0, 50.0 ,50.0]
        for col in range(0,7):
            if not b.allowsMove(col):
                scores[col] = -1.0
            elif b.winsFor(self.ox):
                scores[col] = 100.0
            elif b.winsFor(self.oppCh()):
                scores[col] = 0.0
            elif self.ply == 0.0:
                scores[col] = 50.0 
            else:
                b.addMove(col, self.ox) 
                opp = Player(self.oppCh(), self.tbt, self.ply-1)
                s = opp.scoreBoard(b)
                scores[col] = 100.0 - max(s)
                b.delMove(col)
        return max(scores)
    
    def scoresFor(self, b):
        """Its job is to return a list of scores, with the cth 
        score representing the "goodness" of the input board 
        after the player moves to column c. And, "goodness" is 
        measured by what happens in the game after self.ply moves.
        """
        scores = [50.0, 50.0, 50.0, 50.0, 50.0, 50.0 ,50.0]
        for col in range(0,7):
            if not b.allowsMove(col):
                scores[col] = -1.0
            elif b.winsFor(self.ox):
                scores[col] = 100.0
            elif b.winsFor(self.oppCh()):
                scores[col] = 0.0
            elif self.ply == 0.0:
                scores[col] = 50.0 
            else:
                b.addMove(col, self.ox) 
                opp = Player(self.oppCh(), self.tbt, self.ply-1)
                s = opp.scoresFor(b)
                scores[col] = 100.0 - max(s)
                b.delMove(col)
        return scores

    def tiebreakMove(self,scores):
        """uses
           a tie break method appropriate to the player tie breaking type, and
           then it returns the correct column to move to
        """ 
        maxIndices = []
        for i in range(len(scores)):
            if scores[i] == max(scores):
                maxIndices += [i]
        if self.tbt == 'LEFT':
            return maxIndices[0]
        if self.tbt == 'RIGHT':
            return maxIndices[-1]
        if self.tbt == 'RANDOM':
            return random.choice(maxIndices)
    
    def nextMove(self, b):
        """
        Chooses move based on score and, when neccesary, tie breaker. 
        """
        scores = self.scoresFor(b)
        return self.tiebreakMove(scores)
